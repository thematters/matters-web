name: Test E2E

# This workflow is triggered manually via workflow_dispatch.
# The typical flow is:
# 1. A Vercel preview deployment finishes.
# 2. Vercel sends a webhook (https://vercel.com/matters/matters-web/settings/webhooks) to our proxy serverless function (https://github.com/thematters/vercel-webhook-proxy/blob/main/api/trigger-github-actions-e2e.ts).
# 3. The proxy function triggers this GitHub Action workflow_dispatch event, passing the preview URL as an input.
on:
  workflow_dispatch:
    inputs:
      vercel_preview_url:
        description: 'Vercel Preview for E2E Testing'
        required: true
        type: string
      pr_number:
        description: 'The ID of the pull request'
        required: true
        type: string
      pr_sha:
        description: 'The SHA of the pull request'
        required: true
        type: string

env:
  PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.inputs.vercel_preview_url }}
  PLAYWRIGHT_AUTH_EMAIL_ALICE: ${{ secrets.PLAYWRIGHT_AUTH_EMAIL_ALICE }}
  PLAYWRIGHT_AUTH_PWD_ALICE: ${{ secrets.PLAYWRIGHT_AUTH_PWD_ALICE }}
  PLAYWRIGHT_AUTH_EMAIL_BOB: ${{ secrets.PLAYWRIGHT_AUTH_EMAIL_BOB }}
  PLAYWRIGHT_AUTH_PWD_BOB: ${{ secrets.PLAYWRIGHT_AUTH_PWD_BOB }}
  PLAYWRIGHT_PAYMENT_PWD_ALICE: ${{ secrets.PLAYWRIGHT_PAYMENT_PWD_ALICE }}
  PLAYWRIGHT_PAYMENT_PWD_BOB: ${{ secrets.PLAYWRIGHT_PAYMENT_PWD_BOB }}

permissions:
  statuses: write

jobs:
  e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Create check run for PR
        uses: guibranco/github-status-action-v2@v1.1.13
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: 'Test E2E / e2e'
          state: 'pending'
          description: 'E2E tests running'
          sha: ${{ github.event.inputs.pr_sha }}
          target_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Install Dependencies
        run: npm ci

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright_cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install Playwright Browsers
        run: npm run test:e2e:prepare
        if: steps.playwright_cache.outputs.cache-hit != 'true'

      - name: Generate Types (Develop)
        if: github.base_ref != 'master' && github.base_ref != 'main'
        run: npm run gen:type

      - name: Generate Types (production)
        if: github.base_ref == 'master' || github.base_ref == 'main'
        run: npm run gen:type:prod

      - name: Run Playwright tests
        run: cp .env.dev .env.local && npm run test:e2e

      - name: Output Playwright tests
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Update check run status
        uses: guibranco/github-status-action-v2@v1.1.13
        if: always()
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: 'Test E2E / e2e'
          state: ${{ job.status == 'success' && 'success' || 'failure' }}
          description: ${{ job.status == 'success' && 'E2E tests passed' || 'E2E tests failed' }}
          sha: ${{ github.event.inputs.pr_sha }}
          target_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
