name: Deployment

on:
  pull_request:
    branches:
      - master
      - develop
      - stage
    types: [closed]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  build_and_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Setup Node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: '16.14'

      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v2.1.7
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Generate Types (develop)
        if: github.base_ref == 'develop'
        run: |
          npm run gen:clean \
          && npm run gen:type

      - name: Generate Types (stage)
        if: github.base_ref == 'stage'
        run: |
          npm run gen:clean \
          && npm run gen:type

      - name: Generate Types (production)
        if: github.base_ref == 'master'
        run: |
          npm run gen:clean \
          && npm run gen:type:prod

      - name: Lint
        run: |
          npm run lint \
          && npm run format:check

      # - name: Test
      #   run: npm install codecov -g && npm run test && codecov
      #   env:
      #     CODECOV_TOKEN: f109cbf6-b6c7-4a08-ad03-981bc4cd1fe8
      #     MATTERS_ENV: test
      #     API_URL: http://matters-server-develop.ap-southeast-1.elasticbeanstalk.com/graphql

      # - name: Test - BDD

      # === `develop` branch ===
      - name: Build (develop)
        if: github.base_ref == 'develop'
        run: cp .env.dev .env && npm run build

      # === `stage` branch ===
      - name: Build (stage)
        if: github.base_ref == 'stage'
        run: cp .env.stage .env && npm run build

      # === `master` branch ===
      - name: Build (production)
        if: github.base_ref == 'master'
        run: cp .env.prod .env && npm run build

      - name: Setup AWS
        if: github.base_ref == 'develop' || github.base_ref == 'stage' || github.base_ref == 'master'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Generate deployment package
        if: github.base_ref == 'develop' || github.base_ref == 'stage' || github.base_ref == 'master'
        run: |
          rm -rf node_modules \
          && npm install --production --legacy-peer-deps \
          && zip -r --symlinks deploy.zip . -x .git/\*

      # === `develop` branch ===
      - name: Upload Assets (develop)
        if: github.base_ref == 'develop'
        run: |
          aws s3 sync .next s3://web-develop.matters.news/_next

      - name: Deploy to EB (develop)
        if: github.base_ref == 'develop'
        uses: einaregilsson/beanstalk-deploy@v19
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: matters-stage
          environment_name: matters-client-develop
          version_label: matters-web-develop-${{ hashFiles('deploy.zip') }}
          version_description: ${{ github.SHA }}
          region: ap-southeast-1
          deployment_package: deploy.zip
          use_existing_version_if_available: true
          wait_for_deployment: true

      # === `stage` branch ===
      - name: Upload Assets (stage)
        if: github.base_ref == 'stage'
        run: |
          aws s3 sync .next s3://web-stage.matters.news/_next

      - name: Deploy to EB (stage)
        if: github.base_ref == 'stage'
        uses: einaregilsson/beanstalk-deploy@v19
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: matters-eb-stage
          environment_name: matters-web-stage
          version_label: matters-web-stage-${{ hashFiles('deploy.zip') }}
          version_description: ${{ github.SHA }}
          region: ap-southeast-1
          deployment_package: deploy.zip
          use_existing_version_if_available: true
          wait_for_deployment: true

      # === `master` branch ===
      - name: Upload Assets (production)
        if: github.base_ref == 'master'
        run: |
          aws s3 sync .next s3://matters.news/_next

      - name: Deploy to EB (production)
        if: github.base_ref == 'master'
        uses: einaregilsson/beanstalk-deploy@v19
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: matters-prod
          environment_name: matters-client-prod
          version_label: matters-web-prod-${{ hashFiles('deploy.zip') }}
          version_description: ${{ github.SHA }}
          region: ap-southeast-1
          deployment_package: deploy.zip
          use_existing_version_if_available: true
          wait_for_deployment: true

      - name: Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: matters-web
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
